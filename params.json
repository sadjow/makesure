{"name":"Makesure","tagline":"JavaScript object validation made easy.","body":"# makesure\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/sadjow/makesure?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![build status][travis-image]][travis-url]\r\n\r\n```js\r\nvar makesure = require('makesure')\r\n\r\nvar validateUser = makesure(function(){\r\n  this.permit('name email') // optional\r\n  this.attrs('name email').isNot('empty').orSay(\"can't be empty\")\r\n})\r\n\r\n// Validates a object, with an intrusive attribute.\r\nvalidateUser({ name: '', description: 'My description', admin: true }, function(err, user){\r\n  // err == {\r\n  //   'name': [{'EMPTY': \"can't be empty\"}]\r\n  // }\r\n  //\r\n  // user == {\r\n  //   name: '',\r\n  //   description: 'My description'\r\n  // }\r\n})\r\n```\r\n\r\n##  Features\r\n\r\n  * Registry.\r\n  * Async;\r\n  * DSL;\r\n  * Nested;\r\n  * Focus on attributes or general;\r\n  * Validate the entire object and return all the errors;\r\n  * You can use your own functions for validation, or use a the set of functions like of the [validator](https://github.com/chriso/validator.js) package provides.\r\n  * tags;\r\n  * Built-in validations;\r\n\r\n## Roadmap\r\n\r\n  * Improve general validation to add general messages.\r\n  * General messages based on attributes validation\r\n\r\n##  Installation\r\n\r\n```console\r\nnpm install --save makesure\r\n```\r\n\r\nor for client-side:\r\n\r\n```console\r\nbower install --save makesure\r\n```\r\n\r\n## Nested validation\r\n\r\nYou can use makesure validate nested function to validate a whole object and get all the errors at once.\r\n\r\n```js\r\nvar makesure = require('makesure')\r\n\r\nvar validateAddress = makesure(function(){\r\n  this.attr('street').isNot('empty')\r\n    .orSay(\"can't be empty\")\r\n})\r\n\r\nvar validateUser = makesure(function(){\r\n  this.attr('name').is('length', 3, 200)\r\n    .orSay('minimum length is 3 and max is 200')\r\n  this.attr('address').with(validateAddress) // nested\r\n})\r\n\r\nvalidateUser({ name: '', address: { street: '' } }, function(err, user){\r\n  // err == {\r\n  //   'name': [{code: \"LENGTH\", message: \"minimum length is 3 and max is 200\"}],\r\n  //   'address.street': [{ code: \"EMPTY\", message: \"can't be empty\"}]\r\n  // }\r\n})\r\n```\r\n\r\n## General validation\r\n\r\nSometimes, it's needed to validate the time of the operation or if a configuration flag is enabled. That validation is general for that object/operation.\r\n\r\n```js\r\nvar validateAction = makesure(function(){\r\n  this.validate(function(cb){\r\n    cb(null, new Date().getDay() != 7);\r\n  }).orSay(\"The operation can't be performed on Sunday.\")\r\n  .tag(\"sunday_restriction\"); // if not set the tag default 'invalid' is used.\r\n})\r\n\r\nvalidateAction({}, function(err){\r\n  // err = {\r\n  //   'base': [ {code: 'SUNDAY_RESTRICTION', message: \"The operation can't be performed on Sunday.\"} ]\r\n  // }\r\n})\r\n```\r\n\r\n## Built-in validations\r\n\r\nThis project is using the [validator](https://github.com/chriso/validator.js) package as the built-in validations functions.\r\n\r\n```js\r\nvar validator = require('validator');\r\n\r\nmakesure.registerSync('equals', validator.equals);\r\nmakesure.registerSync('contains', validator.contains);\r\nmakesure.registerSync('matches', validator.matches);\r\nmakesure.registerSync('email', validator.isEmail);\r\nmakesure.registerSync('url', validator.isURL);\r\nmakesure.registerSync('fqdn', validator.isFQDN);\r\nmakesure.registerSync('ip', validator.isIP);\r\nmakesure.registerSync('alpha', validator.isAlpha);\r\nmakesure.registerSync('numeric', validator.isNumeric);\r\nmakesure.registerSync('alphanumeric', validator.isAlphanumeric);\r\nmakesure.registerSync('base64', validator.isBase64);\r\nmakesure.registerSync('hexadecimal', validator.isHexadecimal);\r\nmakesure.registerSync('hex_color', validator.isHexColor);\r\nmakesure.registerSync('lowercase', validator.isLowercase);\r\nmakesure.registerSync('uppercase', validator.isUppercase);\r\nmakesure.registerSync('int', validator.isInt);\r\nmakesure.registerSync('float', validator.isFloat);\r\nmakesure.registerSync('divisible_by', validator.isDivisibleBy);\r\nmakesure.registerSync('null', validator.isNull);\r\nmakesure.registerSync('empty', validator.isNull);\r\nmakesure.registerSync('length', validator.isLength);\r\nmakesure.registerSync('byte_length', validator.isByteLength);\r\nmakesure.registerSync('uuid', validator.isUUID);\r\nmakesure.registerSync('date', validator.isDate);\r\nmakesure.registerSync('after', validator.isAfter);\r\nmakesure.registerSync('before', validator.isBefore);\r\nmakesure.registerSync('in', validator.isIn);\r\nmakesure.registerSync('credit_card', validator.isCreditCard);\r\nmakesure.registerSync('isbn', validator.isISBN);\r\nmakesure.registerSync('json', validator.isJSON);\r\nmakesure.registerSync('multibyte', validator.isMultibyte);\r\nmakesure.registerSync('ascii', validator.isAscii);\r\nmakesure.registerSync('full_width', validator.isFullWidth);\r\nmakesure.registerSync('half_width', validator.isHalfWidth);\r\nmakesure.registerSync('variable_width', validator.isVariableWidth);\r\nmakesure.registerSync('surrogate_pair', validator.isSurrogatePair);\r\nmakesure.registerSync('mongo_id', validator.isMongoId);\r\n```\r\n\r\n## License\r\n\r\n[MIT](https://github.com/sadjow/makesure/blob/master/LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/makesure.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/makesure\r\n[travis-image]: https://img.shields.io/travis/sadjow/makesure/master.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/sadjow/makesure\r\n","google":"UA-48346133-2","note":"Don't delete this file! It's used internally to help with page regeneration."}